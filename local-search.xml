<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>elementUI 与搭建登录页面</title>
    <link href="/2023/03/7cfa452e70c6.html"/>
    <url>/2023/03/7cfa452e70c6.html</url>
    
    <content type="html"><![CDATA[<h2 id="一-Element-Plus集成"><a href="#一-Element-Plus集成" class="headerlink" title="一. Element-Plus集成"></a>一. Element-Plus集成</h2><h3 id="1-1-全局引入"><a href="#1-1-全局引入" class="headerlink" title="1.1. 全局引入"></a>1.1. 全局引入</h3><ul><li>“types”: [“element-plus&#x2F;global”] 的配置，可以使用 volar 提示 props</li></ul><h3 id="1-2-按需引入"><a href="#1-2-按需引入" class="headerlink" title="1.2. 按需引入(*)"></a>1.2. 按需引入(*)</h3><ul><li><p>vite插件配置</p><p><a href="http://element-plus.org/zh-CN/guide/quickstart.html#%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5">http://element-plus.org/zh-CN/guide/quickstart.html#%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5</a></p></li></ul><h3 id="1-3-图标的引入"><a href="#1-3-图标的引入" class="headerlink" title="1.3. 图标的引入"></a>1.3. 图标的引入</h3><h3 id="1-4-ElMessage引入"><a href="#1-4-ElMessage引入" class="headerlink" title="1.4. ElMessage引入"></a>1.4. ElMessage引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> registerIcons <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./global/register-icons&#x27;</span><br><br><span class="hljs-comment">// 0.针对ElMessage和ElLoading等组件引入样式</span><br><span class="hljs-comment">// 1.全局引入样式(所有样式全部引入)</span><br><span class="hljs-comment">// import &#x27;element-plus/dist/index.css&#x27;</span><br><span class="hljs-comment">// 2.组件样式引入</span><br><span class="hljs-comment">// import &#x27;element-plus/theme-chalk/el-message.css&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 3.使用vite-plugin-style-import</span><br><span class="hljs-comment"> *   * npm install vite-plugin-style-import consola -D</span><br><span class="hljs-comment"> *   * 在vite.config.ts中配置</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 1.全局注册element-plus: 方便和简洁</span><br><span class="hljs-comment">// import ElementPlus from &#x27;element-plus&#x27;</span><br><span class="hljs-comment">// import &#x27;element-plus/dist/index.css&#x27;</span><br><br><span class="hljs-comment">// app.use(ElementPlus)</span><br><br><span class="hljs-comment">// 2.按需引入: 用到哪一个组件再引入</span><br><span class="hljs-comment">// import &#123; ElButton &#125; from &#x27;element-plus&#x27;</span><br><span class="hljs-comment">// app.component(ElButton.name, ElButton)</span><br><br><span class="hljs-comment">// 3.图标的全局注册</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(registerIcons)<br></code></pre></td></tr></table></figure><h2 id="二-搭建登录页面"><a href="#二-搭建登录页面" class="headerlink" title="二. 搭建登录页面"></a>二. 搭建登录页面</h2><h3 id="2-1-背景的搭建"><a href="#2-1-背景的搭建" class="headerlink" title="2.1. 背景的搭建"></a>2.1. 背景的搭建</h3><ul><li>100vw&#x2F;vh</li></ul><h3 id="2-2-登录界面Panel"><a href="#2-2-登录界面Panel" class="headerlink" title="2.2. 登录界面Panel"></a>2.2. 登录界面Panel</h3><h4 id="2-2-1-整体界面的搭建"><a href="#2-2-1-整体界面的搭建" class="headerlink" title="2.2.1. 整体界面的搭建"></a>2.2.1. 整体界面的搭建</h4><ul><li>标题</li><li>tabs</li><li>记住密码&#x2F;忘记链接(组件)</li><li>立即登录(组件)</li></ul><h4 id="2-2-2-tabs搭建过程"><a href="#2-2-2-tabs搭建过程" class="headerlink" title="2.2.2. tabs搭建过程"></a>2.2.2. tabs搭建过程</h4><ul><li>label的插槽使用</li><li>内容显示</li></ul><h4 id="2-2-3-账号登录form"><a href="#2-2-3-账号登录form" class="headerlink" title="2.2.3. 账号登录form"></a>2.2.3. 账号登录form</h4><ul><li>ElForm&#x2F;ElFormItem&#x2F;ElInput</li><li>绑定属性</li></ul><h4 id="2-2-4-form的校验规则"><a href="#2-2-4-form的校验规则" class="headerlink" title="2.2.4. form的校验规则"></a>2.2.4. form的校验规则</h4><h4 id="2-2-5-点击立即登录"><a href="#2-2-5-点击立即登录" class="headerlink" title="2.2.5. 点击立即登录"></a>2.2.5. 点击立即登录</h4><ul><li>父组件发生点击, 执行子组件的函数.</li><li>defineExpose()： 用于定义暴露给全局作用域的变量</li><li>const accountRef &#x3D; ref&lt;InstanceType<typeof PaneAccount>&gt;()</li></ul><h3 id="2-3-登录的操作"><a href="#2-3-登录的操作" class="headerlink" title="2.3. 登录的操作"></a>2.3. 登录的操作</h3><h4 id="2-3-1-form通过验证"><a href="#2-3-1-form通过验证" class="headerlink" title="2.3.1. form通过验证"></a>2.3.1. form通过验证</h4><ul><li>formRef.validate(回调)</li></ul><h4 id="2-3-2-登录接口的调用"><a href="#2-3-2-登录接口的调用" class="headerlink" title="2.3.2. 登录接口的调用"></a>2.3.2. 登录接口的调用</h4><ul><li>post</li><li>data: {name, password}</li></ul><h4 id="2-3-3-将登录操作store中"><a href="#2-3-3-将登录操作store中" class="headerlink" title="2.3.3. 将登录操作store中"></a>2.3.3. 将登录操作store中</h4><h4 id="2-3-4-IAccount类型的定义"><a href="#2-3-4-IAccount类型的定义" class="headerlink" title="2.3.4. IAccount类型的定义"></a>2.3.4. IAccount类型的定义</h4><h3 id="2-4-postman的使用"><a href="#2-4-postman的使用" class="headerlink" title="2.4. postman的使用"></a>2.4. postman的使用</h3><h3 id="2-5-token缓存和cache封装"><a href="#2-5-token缓存和cache封装" class="headerlink" title="2.5. token缓存和cache封装"></a>2.5. token缓存和cache封装</h3>]]></content>
    
    
    <categories>
      
      <category>前端项目</category>
      
      <category>CMS 项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>axios</title>
    <link href="/2023/03/c6ffc7ae2247.html"/>
    <url>/2023/03/c6ffc7ae2247.html</url>
    
    <content type="html"><![CDATA[<h1 id="网络请求库-–-axios库"><a href="#网络请求库-–-axios库" class="headerlink" title="网络请求库 – axios库"></a>网络请求库 – axios库</h1><h2 id="认识axios"><a href="#认识axios" class="headerlink" title="认识axios"></a>认识axios</h2><p><img src="http://rrk0fj71q.hn-bkt.clouddn.com/image-20230315224344076.png" alt="image-20230315224344076"></p><h2 id="axios请求方式"><a href="#axios请求方式" class="headerlink" title="axios请求方式"></a>axios请求方式</h2><p><img src="http://rrk0fj71q.hn-bkt.clouddn.com/image-20230316131343485.png" alt="image-20230316131343485"></p><h2 id="常见的配置选项"><a href="#常见的配置选项" class="headerlink" title="常见的配置选项"></a>常见的配置选项</h2><p><img src="http://rrk0fj71q.hn-bkt.clouddn.com/image-20230316131542711.png" alt="image-20230316131542711"></p><h2 id="axios的创建实例"><a href="#axios的创建实例" class="headerlink" title="axios的创建实例"></a>axios的创建实例</h2><p><img src="http://rrk0fj71q.hn-bkt.clouddn.com/image-20230316133936328.png" alt="image-20230316133936328"></p><h2 id="请求和响应拦截器"><a href="#请求和响应拦截器" class="headerlink" title="请求和响应拦截器"></a>请求和响应拦截器</h2><p><img src="http://rrk0fj71q.hn-bkt.clouddn.com/image-20230316134035896.png" alt="image-20230316134035896"></p><p>用处1：通过请求和响应拦截器加载 <code>loading</code>动画</p><p>用处 2：对 <code>请求参数 </code>的修改，token cookie</p><h2 id="axios请求库封装-降低项目对-axios-库的耦合度"><a href="#axios请求库封装-降低项目对-axios-库的耦合度" class="headerlink" title="axios请求库封装(降低项目对 axios 库的耦合度)"></a>axios请求库封装(降低项目对 axios 库的耦合度)</h2><p><img src="http://rrk0fj71q.hn-bkt.clouddn.com/image-20230316141720842.png" alt="image-20230316141720842"></p><p>typescript 封装： <a href="https://juejin.cn/post/7071518211392405541">在项目中用ts封装axios，一次封装整个团队受益😁 - 掘金 (juejin.cn)</a></p><ul><li>类拦截器 （类内部的拦截，aka 通用拦截）</li><li>实例拦截器（针对不同实例的拦截，创建实例的时候传入不同的拦截器实现不同的效果（如 loading））</li><li>接口拦截器（对每个请求做精细化的控制）</li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CMS 项目文档</title>
    <link href="/2023/03/b218196c82cd.html"/>
    <url>/2023/03/b218196c82cd.html</url>
    
    <content type="html"><![CDATA[<h1 id="每个配置文件的作用"><a href="#每个配置文件的作用" class="headerlink" title="每个配置文件的作用"></a>每个配置文件的作用</h1><ol><li><code>vite.config.ts</code>: 用于配置项目的构建选项和开发服务器选项, 配置插件、别名、CSS 预处理器等选项，以满足不同项目的需求。</li><li><code>tsconfig.json</code>: 用于配置项目的 TypeScript 编译选项，包括编译器的选项、编译输出的目录、编译的文件等。</li><li><code>env.d.ts</code>: 是一个声明文件，用于声明 TypeScript 中使用的全局变量的类型。在 Vue 3 项目中，<code>env.d.ts</code> 文件通常位于项目的根目录下，用于声明项目中使用的环境变量的类型。</li><li><code>.eslintrc.cjs</code>: 代码规范</li><li><code>editorconfig</code>: 代码规范</li></ol><h1 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h1><p>baseURL的值：</p><p><a href="http://152.136.185.210:5000/">http://152.136.185.210:5000</a><br><a href="http://152.136.185.210:4000/">http://152.136.185.210:4000</a></p><p>设置全局token的方法：</p><p><code>const res = pm.response.json(); </code> </p><p><code>pm.globals.set(&quot;token&quot;, res.data.token);</code></p><p>接口文档v2版本：（有部分更新）</p><p><a href="https://documenter.getpostman.com/view/12387168/TzzDKb12">https://documenter.getpostman.com/view/12387168/TzzDKb12</a></p><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><h4 id="1-目录结构的创建"><a href="#1-目录结构的创建" class="headerlink" title="1. 目录结构的创建"></a>1. 目录结构的创建</h4><h4 id="2-css样式的重置"><a href="#2-css样式的重置" class="headerlink" title="2. css样式的重置"></a>2. css样式的重置</h4><h4 id="3-vue-router路由"><a href="#3-vue-router路由" class="headerlink" title="3. vue-router路由"></a>3. vue-router路由</h4><h4 id="4-pinia状态管理"><a href="#4-pinia状态管理" class="headerlink" title="4. pinia状态管理"></a>4. pinia状态管理</h4><h4 id="5-axios网络请求（-）"><a href="#5-axios网络请求（-）" class="headerlink" title="5. axios网络请求（*）"></a>5. axios网络请求（*）</h4><h4 id="6-区分开发和生产环境"><a href="#6-区分开发和生产环境" class="headerlink" title="6. 区分开发和生产环境"></a>6. 区分开发和生产环境</h4>]]></content>
    
    
    <categories>
      
      <category>前端项目</category>
      
      <category>CMS 项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
